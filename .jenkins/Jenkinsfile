def parseJsonText(String jsonText) {
  final slurper = new groovy.json.JsonSlurper()
  return new HashMap<>(slurper.parseText(jsonText))
}

podTemplate(label: 'nhf',containers: [
    containerTemplate(name: 'python', image: 'registry-vpc.cn-hangzhou.aliyuncs.com/luozixuan/python:latest', ttyEnabled: true, command: 'cat'),
    containerTemplate(
            name: 'jnlp',
            image: 'registry-vpc.cn-hangzhou.aliyuncs.com/nanhangfei/jnlp-slave:3.7-1-alpine',
            args: '${computer.jnlpmac} ${computer.name}',
            command: ''
    )
  ])
{
node ('nhf') {

    echo 'ready go'

    stage("clone code"){
        git credentialsId: '434aa890-ec99-4dd4-93ea-686fb6c3a3d2', url: 'https://github.com/luozixuan123/python-test.git'
        echo 'clone code complete'
    }
    def configFile = readFile("./.jenkins/config.json")
    def configStates = parseJsonText(configFile)
    def messageUrl = configStates.jenkinsUrl+'/job/'+configStates.projectName

    stage("python test"){

        //进行sonarqube的代码检查
        stage("start check code"){
            def sonarhome = tool name: 'sonarqube scanner 3.0.3', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
            def status = sh sonarhome + '/bin/sonar-scanner -Dsonar.host.url='+configStates.sonarHostUrl+' -Dsonar.projectName='+configStates.projectName+' -Dsonar.projectVersion='+configStates.projectVersion+' -Dsonar.projectKey='+configStates.projectName+' -Dsonar.sources=. -X'
            echo 'start check code complete'
        }

        //进入容器内部
        container('python'){

            try{
                //进行python的单元测试
                stage("unit test"){
                    sh 'pytest --junitxml=.jenkins/pytest_report.xml'
                    echo 'unit test complete'
                }

                //根据需要可以运行python文件
                stage("run py"){
                    if (configStates.mainDir != ""){
                        sh 'python ' + configStates.mainDir
                    }
                    echo 'run py complete'
                }

                //获取sonarqube检查的报告
                stage("get check report"){
                    sh 'curl -o sonar_report.txt'+ ' ' +configStates.sonarHostUrl+'/api/qualitygates/project_status?projectKey='+configStates.projectName
                    def jsonPayload = readFile 'sonar_report.txt'
                    def states = parseJsonText(jsonPayload)
                    if (states.projectStatus.status == 'OK'){
                        echo 'pass sonarqube code check'
                    }else {
                        echo 'fail sonarqube code check'
                        error 'sonarqube check fail'
                    }
                    echo 'get check report complete'
                }
            }catch(Exception e){
                sh """
                curl '${configStates.dingUrl}' -H 'Content-Type: application/json' -d '{"link": {"text": "bulid fail", "title":"build", "picUrl": "http://picm.photophoto.cn/015/037/001/0370010335.jpg", "messageUrl": "${messageUrl}"}, "msgtype": "link"}'
                """
            }
        }
    }

    //检查通过则部署
    stage("depoly"){
            sshagent (credentials: ['53d08ad8-640c-4763-b083-96d694dad736']) {
            sh 'ssh -o StrictHostKeyChecking=no -l root 106.14.148.100 uname -a'
            sh 'scp -r . root@106.14.148.100:/test_code'
        }
    }

    //打包代码
    stage('park code'){
        sh 'tar -zcvf code.tar.gz ' + configStates.projectName
        echo 'park code complete'
    }

    //生成测试报告
    stage('push test report'){
        junit allowEmptyResults: true, testResults: '.jenkins/pytest_report.xml'
        echo 'push test report complete'
    }

    //生成代码包
    stage('archive artifacts'){
        archiveArtifacts 'code.tar.gz'
        echo 'archive artifacts complete'
    }
}
}